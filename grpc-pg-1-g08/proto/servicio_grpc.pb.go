// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/servicio.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Servicio_Hola_FullMethodName            = "/servicio.Servicio/Hola"
	Servicio_ListadoPersonas_FullMethodName = "/servicio.Servicio/ListadoPersonas"
)

// ServicioClient is the client API for Servicio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicioClient interface {
	Hola(ctx context.Context, in *Requerimiento, opts ...grpc.CallOption) (*Respuesta, error)
	ListadoPersonas(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*Lista, error)
}

type servicioClient struct {
	cc grpc.ClientConnInterface
}

func NewServicioClient(cc grpc.ClientConnInterface) ServicioClient {
	return &servicioClient{cc}
}

func (c *servicioClient) Hola(ctx context.Context, in *Requerimiento, opts ...grpc.CallOption) (*Respuesta, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, Servicio_Hola_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicioClient) ListadoPersonas(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*Lista, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Lista)
	err := c.cc.Invoke(ctx, Servicio_ListadoPersonas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicioServer is the server API for Servicio service.
// All implementations must embed UnimplementedServicioServer
// for forward compatibility.
type ServicioServer interface {
	Hola(context.Context, *Requerimiento) (*Respuesta, error)
	ListadoPersonas(context.Context, *Vacio) (*Lista, error)
	mustEmbedUnimplementedServicioServer()
}

// UnimplementedServicioServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServicioServer struct{}

func (UnimplementedServicioServer) Hola(context.Context, *Requerimiento) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hola not implemented")
}
func (UnimplementedServicioServer) ListadoPersonas(context.Context, *Vacio) (*Lista, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListadoPersonas not implemented")
}
func (UnimplementedServicioServer) mustEmbedUnimplementedServicioServer() {}
func (UnimplementedServicioServer) testEmbeddedByValue()                  {}

// UnsafeServicioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicioServer will
// result in compilation errors.
type UnsafeServicioServer interface {
	mustEmbedUnimplementedServicioServer()
}

func RegisterServicioServer(s grpc.ServiceRegistrar, srv ServicioServer) {
	// If the following call pancis, it indicates UnimplementedServicioServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Servicio_ServiceDesc, srv)
}

func _Servicio_Hola_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Requerimiento)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioServer).Hola(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Servicio_Hola_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioServer).Hola(ctx, req.(*Requerimiento))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servicio_ListadoPersonas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioServer).ListadoPersonas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Servicio_ListadoPersonas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioServer).ListadoPersonas(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

// Servicio_ServiceDesc is the grpc.ServiceDesc for Servicio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Servicio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servicio.Servicio",
	HandlerType: (*ServicioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hola",
			Handler:    _Servicio_Hola_Handler,
		},
		{
			MethodName: "ListadoPersonas",
			Handler:    _Servicio_ListadoPersonas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/servicio.proto",
}
