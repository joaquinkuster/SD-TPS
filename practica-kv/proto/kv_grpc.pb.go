// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/kv.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Coordinador_Obtener_FullMethodName  = "/kv.Coordinador/Obtener"
	Coordinador_Guardar_FullMethodName  = "/kv.Coordinador/Guardar"
	Coordinador_Eliminar_FullMethodName = "/kv.Coordinador/Eliminar"
)

// CoordinadorClient is the client API for Coordinador service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinadorClient interface {
	Obtener(ctx context.Context, in *SolicitudObtener, opts ...grpc.CallOption) (*RespuestaObtener, error)
	Guardar(ctx context.Context, in *SolicitudGuardar, opts ...grpc.CallOption) (*RespuestaGuardar, error)
	Eliminar(ctx context.Context, in *SolicitudEliminar, opts ...grpc.CallOption) (*RespuestaEliminar, error)
}

type coordinadorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinadorClient(cc grpc.ClientConnInterface) CoordinadorClient {
	return &coordinadorClient{cc}
}

func (c *coordinadorClient) Obtener(ctx context.Context, in *SolicitudObtener, opts ...grpc.CallOption) (*RespuestaObtener, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaObtener)
	err := c.cc.Invoke(ctx, Coordinador_Obtener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinadorClient) Guardar(ctx context.Context, in *SolicitudGuardar, opts ...grpc.CallOption) (*RespuestaGuardar, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaGuardar)
	err := c.cc.Invoke(ctx, Coordinador_Guardar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinadorClient) Eliminar(ctx context.Context, in *SolicitudEliminar, opts ...grpc.CallOption) (*RespuestaEliminar, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaEliminar)
	err := c.cc.Invoke(ctx, Coordinador_Eliminar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinadorServer is the server API for Coordinador service.
// All implementations must embed UnimplementedCoordinadorServer
// for forward compatibility.
type CoordinadorServer interface {
	Obtener(context.Context, *SolicitudObtener) (*RespuestaObtener, error)
	Guardar(context.Context, *SolicitudGuardar) (*RespuestaGuardar, error)
	Eliminar(context.Context, *SolicitudEliminar) (*RespuestaEliminar, error)
	mustEmbedUnimplementedCoordinadorServer()
}

// UnimplementedCoordinadorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoordinadorServer struct{}

func (UnimplementedCoordinadorServer) Obtener(context.Context, *SolicitudObtener) (*RespuestaObtener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Obtener not implemented")
}
func (UnimplementedCoordinadorServer) Guardar(context.Context, *SolicitudGuardar) (*RespuestaGuardar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guardar not implemented")
}
func (UnimplementedCoordinadorServer) Eliminar(context.Context, *SolicitudEliminar) (*RespuestaEliminar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Eliminar not implemented")
}
func (UnimplementedCoordinadorServer) mustEmbedUnimplementedCoordinadorServer() {}
func (UnimplementedCoordinadorServer) testEmbeddedByValue()                     {}

// UnsafeCoordinadorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinadorServer will
// result in compilation errors.
type UnsafeCoordinadorServer interface {
	mustEmbedUnimplementedCoordinadorServer()
}

func RegisterCoordinadorServer(s grpc.ServiceRegistrar, srv CoordinadorServer) {
	// If the following call pancis, it indicates UnimplementedCoordinadorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Coordinador_ServiceDesc, srv)
}

func _Coordinador_Obtener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudObtener)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinadorServer).Obtener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinador_Obtener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinadorServer).Obtener(ctx, req.(*SolicitudObtener))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinador_Guardar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudGuardar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinadorServer).Guardar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinador_Guardar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinadorServer).Guardar(ctx, req.(*SolicitudGuardar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinador_Eliminar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudEliminar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinadorServer).Eliminar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinador_Eliminar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinadorServer).Eliminar(ctx, req.(*SolicitudEliminar))
	}
	return interceptor(ctx, in, info, handler)
}

// Coordinador_ServiceDesc is the grpc.ServiceDesc for Coordinador service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordinador_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kv.Coordinador",
	HandlerType: (*CoordinadorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Obtener",
			Handler:    _Coordinador_Obtener_Handler,
		},
		{
			MethodName: "Guardar",
			Handler:    _Coordinador_Guardar_Handler,
		},
		{
			MethodName: "Eliminar",
			Handler:    _Coordinador_Eliminar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kv.proto",
}

const (
	Replica_ReplicarMutacion_FullMethodName = "/kv.Replica/ReplicarMutacion"
	Replica_ObtenerLocal_FullMethodName     = "/kv.Replica/ObtenerLocal"
	Replica_GuardarLocal_FullMethodName     = "/kv.Replica/GuardarLocal"
	Replica_EliminarLocal_FullMethodName    = "/kv.Replica/EliminarLocal"
)

// ReplicaClient is the client API for Replica service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio que expone cada Réplica para recibir mutaciones
type ReplicaClient interface {
	ReplicarMutacion(ctx context.Context, in *Mutacion, opts ...grpc.CallOption) (*Reconocimiento, error)
	// Métodos locales para que el Coordinador invoque
	ObtenerLocal(ctx context.Context, in *SolicitudObtener, opts ...grpc.CallOption) (*RespuestaObtener, error)
	GuardarLocal(ctx context.Context, in *SolicitudGuardar, opts ...grpc.CallOption) (*RespuestaGuardar, error)
	EliminarLocal(ctx context.Context, in *SolicitudEliminar, opts ...grpc.CallOption) (*RespuestaEliminar, error)
}

type replicaClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicaClient(cc grpc.ClientConnInterface) ReplicaClient {
	return &replicaClient{cc}
}

func (c *replicaClient) ReplicarMutacion(ctx context.Context, in *Mutacion, opts ...grpc.CallOption) (*Reconocimiento, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reconocimiento)
	err := c.cc.Invoke(ctx, Replica_ReplicarMutacion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaClient) ObtenerLocal(ctx context.Context, in *SolicitudObtener, opts ...grpc.CallOption) (*RespuestaObtener, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaObtener)
	err := c.cc.Invoke(ctx, Replica_ObtenerLocal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaClient) GuardarLocal(ctx context.Context, in *SolicitudGuardar, opts ...grpc.CallOption) (*RespuestaGuardar, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaGuardar)
	err := c.cc.Invoke(ctx, Replica_GuardarLocal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaClient) EliminarLocal(ctx context.Context, in *SolicitudEliminar, opts ...grpc.CallOption) (*RespuestaEliminar, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaEliminar)
	err := c.cc.Invoke(ctx, Replica_EliminarLocal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicaServer is the server API for Replica service.
// All implementations must embed UnimplementedReplicaServer
// for forward compatibility.
//
// Servicio que expone cada Réplica para recibir mutaciones
type ReplicaServer interface {
	ReplicarMutacion(context.Context, *Mutacion) (*Reconocimiento, error)
	// Métodos locales para que el Coordinador invoque
	ObtenerLocal(context.Context, *SolicitudObtener) (*RespuestaObtener, error)
	GuardarLocal(context.Context, *SolicitudGuardar) (*RespuestaGuardar, error)
	EliminarLocal(context.Context, *SolicitudEliminar) (*RespuestaEliminar, error)
	mustEmbedUnimplementedReplicaServer()
}

// UnimplementedReplicaServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReplicaServer struct{}

func (UnimplementedReplicaServer) ReplicarMutacion(context.Context, *Mutacion) (*Reconocimiento, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicarMutacion not implemented")
}
func (UnimplementedReplicaServer) ObtenerLocal(context.Context, *SolicitudObtener) (*RespuestaObtener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerLocal not implemented")
}
func (UnimplementedReplicaServer) GuardarLocal(context.Context, *SolicitudGuardar) (*RespuestaGuardar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardarLocal not implemented")
}
func (UnimplementedReplicaServer) EliminarLocal(context.Context, *SolicitudEliminar) (*RespuestaEliminar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EliminarLocal not implemented")
}
func (UnimplementedReplicaServer) mustEmbedUnimplementedReplicaServer() {}
func (UnimplementedReplicaServer) testEmbeddedByValue()                 {}

// UnsafeReplicaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicaServer will
// result in compilation errors.
type UnsafeReplicaServer interface {
	mustEmbedUnimplementedReplicaServer()
}

func RegisterReplicaServer(s grpc.ServiceRegistrar, srv ReplicaServer) {
	// If the following call pancis, it indicates UnimplementedReplicaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Replica_ServiceDesc, srv)
}

func _Replica_ReplicarMutacion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mutacion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServer).ReplicarMutacion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Replica_ReplicarMutacion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServer).ReplicarMutacion(ctx, req.(*Mutacion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replica_ObtenerLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudObtener)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServer).ObtenerLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Replica_ObtenerLocal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServer).ObtenerLocal(ctx, req.(*SolicitudObtener))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replica_GuardarLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudGuardar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServer).GuardarLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Replica_GuardarLocal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServer).GuardarLocal(ctx, req.(*SolicitudGuardar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replica_EliminarLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudEliminar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServer).EliminarLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Replica_EliminarLocal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServer).EliminarLocal(ctx, req.(*SolicitudEliminar))
	}
	return interceptor(ctx, in, info, handler)
}

// Replica_ServiceDesc is the grpc.ServiceDesc for Replica service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Replica_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kv.Replica",
	HandlerType: (*ReplicaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplicarMutacion",
			Handler:    _Replica_ReplicarMutacion_Handler,
		},
		{
			MethodName: "ObtenerLocal",
			Handler:    _Replica_ObtenerLocal_Handler,
		},
		{
			MethodName: "GuardarLocal",
			Handler:    _Replica_GuardarLocal_Handler,
		},
		{
			MethodName: "EliminarLocal",
			Handler:    _Replica_EliminarLocal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kv.proto",
}
